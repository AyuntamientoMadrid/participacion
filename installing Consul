installing Consul

On AWS (amazone) A Ubuntu 16.04 Server + Swap disk ( 2 times the ram memory size) attached to sda1
Open Ports: ssh 22, http 80, https 443
--Creating and attaching the swap to the ec2 instance:--
** on remote server **
lsblk
sudo mkswap /dev/xvdf
sudo swapon /dev/xvdf
$ sudo nano /etc/fstab
/dev/xvdf none swap sw 0 0
$ sudo swapon --show


bonding on aws the swap and the instance
https://dev.to/hardiksondagar/how-to-use-aws-ebs-volume-as-a-swap-memory-5d15

Ganerating a Private Key file for ssh connection
Creating a root user on aws name: root, login as ubuntu and,
$ sudo passwd root (password=root) then 
sudo cp /home/ubuntu/.ssh/authorized_keys /root/.ssh/

########################################
Issue that is solved in advanced by doing as follows: as root user
on: /home/
$ mkdir deploy
then on: /home/deploy#
we will make a symlink ( removing link with command unlink)
ln -s /root/.rvm /home/deploy/.rvm

on ubuntu 16.04 the output is: ok=72
PLAY RECAP *********************************************************************
root@ec2-13-59-63-38.us-east-2.compute.amazonaws.com : ok=72   changed=44   unreachable=0    failed=0  
##################################################




Running installer instructions
############################################
CONSUL installer for production environments
Using Ansible, it will install and configure the following:
    Ruby
    Rails
    Postgres
    Nginx
    Unicorn
    SMTP
    Memcached
    DelayedJobs
    HTTPS
    Capistrano
It will also create a deploy user to install these libraries
Screencast

How to setup CONSUL for a production environment
Prerequisities

A remote server with the supported distribution

Ubuntu 16.04 x64

Access to a remote server via public ssh key without password. The default user is deploy but you can use any user with sudo privileges.

ssh root@remote-server-ip-address

---Updated system package versions---

sudo apt-get update

Python 2 installed in the remote server

sudo apt-get -y install python-simplejson

No root access

By default the installer assumes you can log in as root. The root user will only be used once to login and create a deploy user. The deploy user is the one that will actually install all libraries and is the user that must be used to login to the server to do maintenance tasks.

If you do not have root access, you will need your system administrator to grant you: sudo privileges for a deploy user in the wheel group without password.

Also you will need to change the variable root access to false.
Using a different user than deploy

Change the variable deploy_user to the username you would like to use.
Running the installer

The following commands must be executed in your local machine

Install Ansible >= 2.4

Get the Ansible Playbook

git clone https://github.com/consul/installer
cd installer

Create your local hosts file

cp hosts.example hosts

Update your local hosts file with the remote server's ip address

remote-server-ip-address (maintain other default options)

Run the ansible playbook

sudo ansible-playbook -v consul.yml -i hosts

Visit remote-server-ip-address
Admin user

You can sign in to the application with the default admin user:

admin@consul.dev
12345678

Other deployment options
Split database from application code

The consul playbook creates the database on the same server as the application code. If you are using a cloud host that offers managed databases (such as AWS RDS, Azure Databases, or Google Cloud SQL), we recommend using that instead.

To set up the application by itself:

    Fork this repository.

    Specify your database credentials (see the database_* group variables) in a vault.

    Run the app playbook instead of the consul one against a clean server.

    sudo ansible-playbook -v app.yml -i hosts

Platform-as-a-Service (PaaS)

Aside from just using managed databases, you might also look into platform-as-a-service options (like Azure App Service or Google App Engine) to not have to manage a server at all.
Deploys with Capistrano
Screencast

How to setup Capistrano

Create your fork

Setup locally for your development environment)

Uncomment this line in consul.yml and rerun the installer

# - capistrano

Run the ansible playbook

sudo ansible-playbook -v consul.yml -i hosts

Download changes from the capistrano branch to your fork

git remote add upstream git@github.com:consul/consul.git
git fetch upstream
git merge upstream/capistrano
git push origin master

Create your deploy-secrets.yml

cp config/deploy-secrets.yml.example config/deploy-secrets.yml

Update deploy-secrets.yml with your server's info

deploy_to: "/home/deploy/consul"
server1: "your_remote_ip_address"
db_server: "localhost"
server_name: "your_remote_ip_address"

Update your repo_url in deploy.rb

set :repo_url, 'https://github.com/your_github_username/consul.git'

Make a change in a view and push it your fork in Github

git add .
git commit -a -m "Add sample text to homepage"
git push origin master

Deploy to production

cap production deploy

You should now see that change at your remote server's ip address
Email configuration
Screencast

How to setup email deliveries

Update the following file in your production server: /home/deploy/consul/shared/config/environments/production.rb

You want to change this block of code and use your own SMTP credentials:

  config.action_mailer.delivery_method = :smtp
  config.action_mailer.smtp_settings = {
    address:              "smtp.example.com",
    port:                 "25",
    domain:               "your_domain.com or ip address",
    user_name:            "username",
    password:             "password",
    authentication:       "plain",
    enable_starttls_auto: true }

And restart the server running this command from your local CONSUL installation (see Deploys with Capistrano for details).

cap production deploy:restart

Once you setup your domain, depending on your SMTP provider, you will have to do two things:

    Update the server_name with your domain in /home/deploy/consul/shared/config/secrets.yml.
    Update the sender_email_address from the admin section (remote-server-ip-address/admin/settings)

If your SMTP provider uses an authentication other than plain, check out the Rails docs on email configuration for the different authentation options.
Configuration Variables

These are the main configuration variables:

# Server Timzone + Locale
timezone: Europe/Madrid
locale: en_US.UTF-8

# Authorized Hosts
ssh_public_key_path: "change_me/.ssh/id_rsa.pub"

# Ruby
ruby_version: 2.3.2

#Postgresql
postgresql_version: 9.6
database_name: "consul_production"
database_user: "deploy"
database_password: "change_me"
database_hostname: "localhost"
database_port: 5432

#SMTP
smtp_address:        "smtp.example.com"
smtp_port:           25
smtp_domain:         "your_domain.com"
smtp_user_name:      "username"
smtp_password:       "password"
smtp_authentication: "plain"

There are many more variables available check them out here For further configuration and customization options check out the CONSUL docs
Ansible Documentation

http://docs.ansible.com/
#######################################################

Issues that need attantions
****************************

Error: /home/deploy/.rvm/scripts/rvm: No such file or directory
fix:
****************************************
Optional
install extra packages on the local machine:
sudo apt-get install ruby-dev libpq-dev
As root on remote server : apt-get update
******************************************
then still we get the error so..

on: root@ip-172-31-23-67:/home/deploy#
we will make a symlink ( removing link with command unlink)
ln -s /root/.rvm /home/deploy/.rvm

should look like this after ll command
drwxr-xr-x  5 deploy wheel 4096 Mar 26 19:57 ./
drwxr-xr-x  4 root   root  4096 Mar 25 22:49 ../
drwx------  3 root   root  4096 Mar 25 22:54 .ansible/
-rw-r--r--  1 deploy wheel  220 Sep  1  2015 .bash_logout
-rw-r--r--  1 deploy wheel 3771 Sep  1  2015 .bashrc
drwxr-xr-x 18 deploy wheel 4096 Mar 27 22:07 consul/
-rw-r--r--  1 deploy wheel  655 May 16  2017 .profile
lrwxrwxrwx  1 root   root    11 Mar 26 19:57 .rvm -> /root/.rvm/
drwx------  2 deploy wheel 4096 Mar 25 22:50 .ssh/

Done
======================================================
Issue:
After rebooting the aws, nginx server is not working
Can't reach the web site
********
The Consul website is not under www ( i change www to www2)
made nginx stop and the consul website was still running.

Error 502
**********************
Solution on Ubuntu 14.04 the following commands is working
Restarting the Unicorn service
# cd /home/deploy/consul
# unicorn -c config/unicorn.rb -E production -D
==========================================================
Error 502 
***************
on ubuntu 16.04 there is known issue: need to read and apply
https://github.com/consul/installer/issues/56
https://github.com/consul/installer#deploys-with-capistrano
========================================================

Configuring Unicorn & Nginx
https://www.digitalocean.com/community/tutorials/how-to-deploy-a-rails-app-with-unicorn-and-nginx-on-ubuntu-14-04#configure-unicorn
https://stackoverflow.com/questions/40773697/failed-to-start-unicorn-application-server



Hebrew RTL
1. /home/deploy/consul/app/assets/stylesheets# nano layout.scss

Special Folders and Files
=====================================

In order to customize your CONSUL fork, you'll make use of some custom folders on the following paths:

    config/locales/custom/

    app/assets/images/custom/

    app/views/custom/

    app/controllers/custom/

    app/models/custom/

Also these are the files where you can apply some customization:

    app/assets/stylesheets/custom.css

    app/assets/stylesheets/_custom_settings.css

    app/assets/javascripts/custom.js

    Gemfile_custom

    config/application.custom.rb
